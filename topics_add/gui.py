import json
import os
import traceback

from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QComboBox, QPushButton, QFileDialog,
    QTreeWidget, QTreeWidgetItem, QSpinBox, QDoubleSpinBox,
    QMessageBox, QSplitter, QTextBrowser, QProgressBar
)
from PyQt6.QtCore import Qt, QObject, QThread, pyqtSignal

from topics_add.gui_progress_manager import GUIProgressManager

# –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–Ω–∞—á–µ–Ω–∏–π
TOOLTIPS = {
    "min_token_length": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞ (—Å–∏–º–≤–æ–ª–æ–≤).\n"
                        "–ü—Ä–∏–º–µ—Ä: 3 ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª–æ–≤–∞ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                        "–ú–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—ë—Ç –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ.",
    "num_topics": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è –º–æ–¥–µ–ª–∏ LDA.\n"
                  "–ü—Ä–∏–º–µ—Ä: 10 ‚Äî –≤—ã–¥–µ–ª–∏—Ç—Å—è 10 —Ç–µ–º–∞—Ç–∏–∫ –≤ —Ç–µ–∫—Å—Ç–∞—Ö.\n"
                  "–ë–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.",
    "passes": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ –æ–±—É—á–µ–Ω–∏—è LDA –ø–æ –≤—Å–µ–º—É –∫–æ—Ä–ø—É—Å—É.\n"
              "–ü—Ä–∏–º–µ—Ä: 15 ‚Äî –º–æ–¥–µ–ª—å —Å–¥–µ–ª–∞–µ—Ç 15 –∏—Ç–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—Ö–æ–¥–∞.\n"
              "–ë–æ–ª—å—à–µ –ø—Ä–æ—Ö–æ–¥–æ–≤ ‚Äî –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –¥–æ–ª—å—à–µ.",
    "iterations": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞.\n"
                  "–ü—Ä–∏–º–µ—Ä: 400 ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ö–æ–¥–∞.",
    "alpha": "–ü–∞—Ä–∞–º–µ—Ç—Ä —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
             "–ú–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π –∏–∑ ['asymmetric','symmetric','auto'].\n"
             "–ü—Ä–∏–º–µ—Ä: 'auto' ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä.",
    "eta": "–ü–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ —Ç–µ–º–∞–º (0‚Äì1).\n"
           "–ü—Ä–∏–º–µ—Ä: 0.01 ‚Äî –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, –º–µ–Ω–µ–µ —Ä–∞–∑–º—ã—Ç—ã–µ —Ç–µ–º—ã.",
    "chunksize": "–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ —Ä–∞–∑).\n"
                 "–ü—Ä–∏–º–µ—Ä: 2000 ‚Äî –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–∏—è.",
    "eval_every": "–ö–∞–∫ —á–∞—Å—Ç–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–µ—Ä–ø–ª–µ–∫—Å–∏—é.\n"
                  "–ü—Ä–∏–º–µ—Ä: 1 ‚Äî –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞.\n"
                  "0 ‚Äî –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å (—É—Å–∫–æ—Ä–µ–Ω–∏–µ).",
    "minimum_probability": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–µ–º—ã –¥–ª—è —É—á—ë—Ç–∞.\n"
                           "–ü—Ä–∏–º–µ—Ä: 0.05 ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é <5%.",
    "random_state": "–°–∏–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏.\n"
                    "–ü—Ä–∏–º–µ—Ä: 42 ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
    "dtype": "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.\n"
             "–í–∞—Ä–∏–∞–Ω—Ç—ã: 'float32' (–±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏), 'float64' (—Ç–æ—á–Ω–µ–µ).",
    "topic_words_for_naming": "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–∑ —Ç–µ–º—ã –±—Ä–∞—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.\n"
                              "–ü—Ä–∏–º–µ—Ä: 10 ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 10 —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤.",
    "topic_embed_topn": "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –±—Ä–∞—Ç—å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Ç–µ–º—ã.\n"
                       "–ü—Ä–∏–º–µ—Ä: 15 ‚Äî —Å—Ä–µ–¥–Ω–µ–µ —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ 15 —Å–ª–æ–≤.",
    "sentence_model": "–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n"
                      "–í–∞—Ä–∏–∞–Ω—Ç—ã: 'all-MiniLM-L6-v2', 'paraphrase-MiniLM-L6-v2', 'all-mpnet-base-v2'.",
    "top_lda_topics_per_doc": "–°–∫–æ–ª—å–∫–æ LDA-—Ç–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –æ–¥–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É.\n"
                             "–ü—Ä–∏–º–µ—Ä: 3 ‚Äî —Ç—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ç–µ–º—ã.",
    "top_semantic_topics_per_doc": "–°–∫–æ–ª—å–∫–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—É.\n"
                                  "–ü—Ä–∏–º–µ—Ä: 2 ‚Äî –¥–≤–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º—ã –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥—É.",
    "theme_words_topk": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã.\n"
                       "–ü—Ä–∏–º–µ—Ä: 50 ‚Äî —Ç–æ–ø 50 —Å–ª–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏–ª–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.",
    "topic_similarity_topk": "–°–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n"
                            "–ü—Ä–∏–º–µ—Ä: 5 ‚Äî —Ç–æ–ø 5 –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
    "similarity_power": "–°—Ç–µ–ø–µ–Ω—å —É—Å–∏–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å–ª–æ–≤.\n"
                       "–ü—Ä–∏–º–µ—Ä: 2 ‚Äî –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ.",
    "input_file": "–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É JSON-—Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏.\n"
                  "–ü—Ä–∏–º–µ—Ä: 'data/songs.json'.",
    "output_file": "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è '.json'.\n"
                   "–ü—Ä–∏–º–µ—Ä: 'results/analysis_output'.",
    "topics_info_file": "JSON-—Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–∞—Ö.\n"
                        "–ü—Ä–∏–º–µ—Ä: 'results/topics_info.json'.",
    "theme_words_file": "JSON-—Ñ–∞–π–ª –¥–ª—è –∫–∞—Ä—Ç—ã —Ç–µ–º—ã ‚Üí —Å–ª–æ–≤–∞.\n"
                       "–ü—Ä–∏–º–µ—Ä: 'results/theme_words.json'.",
    "lda_workers": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–ø–æ—Ç–æ–∫–æ–≤) –¥–ª—è –æ–±—É—á–µ–Ω–∏—è LDA.\n"
                   "–ü—Ä–∏–º–µ—Ä: 4 ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 4 —è–¥—Ä–∞ CPU.",
    "progress_manager": "–¢–∏–ø –ø—Ä–æ–≥—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n"
                        "–í–∞—Ä–∏–∞–Ω—Ç—ã: 'console' ‚Äî –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å, 'gui' ‚Äî –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.",
}


CHOICES = {
    "alpha": ["asymmetric", "symmetric", "auto"],
    "dtype": ["float32", "float64"],
    "progress_manager": ["console", "gui"],
    "sentence_model": ["all-MiniLM-L6-v2", "paraphrase-MiniLM-L6-v2", "all-mpnet-base-v2"]
}


class ConfigEditor(QWidget):
    def __init__(self, config_path):
        super().__init__()
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥–∞")
        self.resize(1000, 800)

        self.config_path = config_path
        self.config = self.load_config(config_path)
        self.widgets = {}

        main_layout = QVBoxLayout(self)
        main_layout.addWidget(QLabel(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞: {config_path}"))

        splitter = QSplitter(Qt.Orientation.Vertical)

        top_layout = QVBoxLayout()
        top_widget = QWidget()
        top_widget.setLayout(top_layout)
        self.tree = QTreeWidget()
        self.tree.setHeaderLabels(["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
        self.tree.setColumnWidth(0, 350)
        self.tree.itemClicked.connect(self.show_tooltip)
        top_layout.addWidget(self.tree)
        self.build_items()

        bottom_layout = QVBoxLayout()
        bottom_widget = QWidget()
        bottom_widget.setLayout(bottom_layout)
        self.tooltip_box = QTextBrowser()
        self.tooltip_box.setFixedHeight(80)
        self.tooltip_box.setStyleSheet("background-color: #f0f0f0; border: 1px solid gray; padding: 4px;")
        bottom_layout.addWidget(QLabel("–ü–æ–¥—Å–∫–∞–∑–∫–∞:"))
        bottom_layout.addWidget(self.tooltip_box)

        splitter.addWidget(top_widget)
        splitter.addWidget(bottom_widget)

        main_layout.addWidget(splitter)

        btn_save = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
        btn_save.clicked.connect(self.save_config)
        main_layout.addWidget(btn_save)

    def load_config(self, path):
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def build_items(self):
        def recurse(parent_item, subtree, path=()):
            for key, val in subtree.items():
                item = QTreeWidgetItem([key])
                parent_item.addChild(item)
                current_path = path + (key,)
                if isinstance(val, dict):
                    recurse(item, val, current_path)
                else:
                    w = self.create_widget(key, val)
                    self.tree.setItemWidget(item, 1, w)
                    self.widgets[current_path] = w
                    tip = TOOLTIPS.get(key)
                    if tip:
                        w.setToolTip(tip)
        recurse(self.tree.invisibleRootItem(), self.config)

    def create_widget(self, key, val):
        ranges = {
            "min_token_length": (1, 20),
            "num_topics": (2, 500),
            "passes": (1, 100),
            "iterations": (10, 1000),
            "eta": (0.0, 1.0),
            "chunksize": (1, 1000),
            "eval_every": (0, 10),
            "minimum_probability": (0.0, 1.0),
            "random_state": (0, 99999),
            "topic_words_for_naming": (1, 100),
            "topic_embed_topn": (1, 100),
            "top_lda_topics_per_doc": (1, 20),
            "top_semantic_topics_per_doc": (1, 20),
            "theme_words_topk": (1, 100),
            "topic_similarity_topk": (1, 20),
            "similarity_power": (1, 5),
            "lda_workers": (1, 32),
        }
        file_in = {"input_file"}
        file_out = {"output_file", "topics_info_file", "theme_words_file"}

        if key in file_in:
            w = QWidget()
            lay = QHBoxLayout(w)
            lay.setContentsMargins(0, 0, 0, 0)
            le = QLineEdit(str(val))
            btn = QPushButton("...")
            btn.clicked.connect(lambda _, le=le: self.select_file(le, True))
            lay.addWidget(le)
            lay.addWidget(btn)
            return w

        if key in file_out:
            return QLineEdit(str(val))

        if key in CHOICES:
            if key == "alpha":
                combo = QComboBox()
                combo.setEditable(True)
                combo.addItems([str(c) for c in CHOICES[key]])
                combo.setCurrentText(str(val))
                return combo
            else:
                combo = QComboBox()
                combo.addItems([str(c) for c in CHOICES[key]])
                combo.setCurrentText(str(val))
                if isinstance(val, (int, float)):
                    combo.setEditable(True)
                return combo

        if key in ranges:
            lo, hi = ranges[key]
            if isinstance(val, float):
                sb = QDoubleSpinBox()
                sb.setRange(lo, hi)
                sb.setDecimals(3)
                sb.setSingleStep((hi - lo) / 100)
                sb.setValue(val)
                return sb
            if isinstance(val, int):
                sb = QSpinBox()
                sb.setRange(lo, hi)
                sb.setValue(val)
                return sb
            if isinstance(val, str):
                try:
                    fv = float(val)
                    sb = QDoubleSpinBox()
                    sb.setRange(lo, hi)
                    sb.setDecimals(3)
                    sb.setValue(fv)
                    return sb
                except:
                    return QLineEdit(val)

        return QLineEdit(str(val))

    def select_file(self, line_edit: QLineEdit, existing: bool):
        cwd = os.getcwd()
        if existing:
            fname, _ = QFileDialog.getOpenFileName(self, "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", cwd, "JSON (*.json)")
        else:
            fname, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", cwd, "JSON (*.json)")
        if fname:
            rel = os.path.relpath(fname, cwd)
            line_edit.setText(rel)

    def save_config(self):
        try:
            new_conf = self.collect_config(self.config, ())
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(new_conf, f, indent=4, ensure_ascii=False)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def collect_config(self, ref: dict, path: tuple):
        result = {}
        for key, val in ref.items():
            curr = path + (key,)
            if isinstance(val, dict):
                result[key] = self.collect_config(val, curr)
            else:
                w = self.widgets.get(curr)
                result[key] = self.get_value(w) if w else val
        return result

    def get_value(self, widget):
        if isinstance(widget, (QSpinBox, QDoubleSpinBox)):
            return widget.value()
        if isinstance(widget, QComboBox):
            txt = widget.currentText()
            try:
                return float(txt)
            except ValueError:
                return txt
        if isinstance(widget, QWidget):
            inner = widget.findChild(QLineEdit)
            if inner:
                return inner.text()
        if isinstance(widget, QLineEdit):
            return widget.text()
        return None

    def show_tooltip(self, item):
        key = item.text(0)
        tip = TOOLTIPS.get(key, "")
        self.tooltip_box.setPlainText(tip or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤")
        self.resize(1200, 800)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å
        self.main_progress_bar = QProgressBar()
        self.task_progress_bar = QProgressBar()
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        # –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥–∞
        self.config_editor = ConfigEditor("config.json")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.btn_run = QPushButton("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        self.btn_run.clicked.connect(self.run_processing)

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.config_editor)

        progress_layout = QVBoxLayout()
        progress_layout.addWidget(QLabel("–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:"))
        progress_layout.addWidget(self.main_progress_bar)
        progress_layout.addWidget(QLabel("–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:"))
        progress_layout.addWidget(self.task_progress_bar)
        progress_layout.addWidget(self.status_label)

        layout.addLayout(progress_layout)
        layout.addWidget(self.btn_run)
        self.setLayout(layout)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_manager = GUIProgressManager(
            self.main_progress_bar,
            self.task_progress_bar,
            self.status_label
        )

    def show_error(self, msg):
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", msg)

    def run_processing(self):
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = QThread()
        self.worker = ProcessingWorker()
        self.worker.error.connect(self.show_error)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –û–®–ò–ë–ö–ò
        self.worker.moveToThread(self.thread)
        self.worker.finished.connect(self.thread.quit)
        self.thread.started.connect(self.worker.run)
        self.thread.start()

class ProcessingWorker(QObject):
    finished = pyqtSignal()
    error = pyqtSignal(str)

    def run(self):
        try:
            from main import main
            main()
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞:\n{str(e)}\n\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}"
            self.error.emit(error_msg)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        finally:
            self.finished.emit()

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    app.setStyle("Fusion")  # –ø—Ä–∏—è—Ç–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    editor = ConfigEditor("config.json")
    editor.show()
    sys.exit(app.exec())
